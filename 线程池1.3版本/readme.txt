设计了一个基于TCP协议的文本聊天程序，其中服务器端通过线程池来处理并发客户端的连接和消息通信请求。
实现：
一个基于TCP协议的文本聊天程序，在服务器端使用线程池来处理客户端的并发请求。
考虑聊天程序的实时通信性和稳定性，确保消息的及时传递和用户列表的正确维护。
能够正确处理异常情况，比如连接断开或客户端退出，提供友好的提示和处理方式。
可以考虑对客户端消息进行简单的处理，比如支持特殊指令、表情符号等功能。

服务器端设计：
服务器端启动时创建一个固定大小的线程池，用于处理客户端连接请求和消息通信。
每个线程从线程池中取出任务时，负责处理一个客户端连接，并实现与该客户端的文字通信。
当有新的客户端连接请求时，服务器将该请求交由线程池中的一个空闲线程处理。
服务器端需要保持所有在线客户端的连接，并能够向所有客户端广播收到的消息。
线程在完成任务后返回到线程池中等待下一个任务。

客户端设计：
客户端启动时向服务器发起连接请求，建立TCP连接。
客户端可以发送文本消息给服务器，并接收服务器转发的其他客户端的消息并显示在界面上。
客户端可以通过输入指令（如"/exit"）来结束与服务器的通信并退出程序。

打开终端分别运行程序，因此至少打开2个及以上的终端，至少有一个是服务器终端并且保证先打开运行。如果有问题记得检查文件路径目录
程序运行格式：
服务器：./server 127.0.0.1（这里是ip） 8888（这里是端口号）
端口号默认8888，因为代码里宏定义的就是8888，输入其他端口号也是8888，要修改的话可以自己在代码里改，就是有点麻烦
客户端：./client 127.0.0.1（这里是ip） 8888 （端口号一样的）
